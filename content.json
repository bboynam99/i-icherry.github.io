{"pages":[{"title":"about","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/about/index.html"},{"title":"My Works","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/work/index.html"}],"posts":[{"title":"EL&#x2F;JSTL","text":"JSP内置对象 | 名称 | 类型 | 描述| out | javax.servlet.jsp.JspWriter | 用于页面输出| request | javax.servlet.http.HttpServletRequest |得到用户请求信息，| response | javax.servlet.http.HttpServletResponse |服务器向客户端的回应信息| config | javax.servlet.ServletConfig |服务器配置，可以取得初始化参数| session | javax.servlet.http.HttpSession |用来保存用户的信息| application | javax.servlet.ServletContext |所有用户的共享信息| page | java.lang.Object |指当前页面转换后的Servlet类的实例| pageContext | javax.servlet.jsp.PageContext |JSP的页面容器| exception | java.lang.Throwable |表示JSP页面所发生的异常，在错误页中才起作用1 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/25/EL%E4%B8%8EJSTL/"},{"title":"Frist Blog","text":"My Frist Blog Welcome to my channel! This is my This is my starting pointPlease contact me. here: 微博 or GitHub document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/22/FristBlog/"},{"title":"数据库事务与ThreadLocal","text":"事务与ThreadLocal 事务 性质 原子性（Atomicity）原子性是指事务是一个不可分割的工作单位，事务中的操要么都发生，要么都不发生。 一致性（Consistency）一个事务中，事务前后数据的完整性必须保持一致。 隔离性（Isolation）多个事务，事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。 持久性（Durability）持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。 并发访问问题（隔离性引起） 脏读：B事务读取到了A事务尚未提交的数据，要求B事务要读取A事 务提交的数据 不可重复读：一个事务中 两次读取的数据的内容不一致,要求的是一个事务中多次读取时数据是一致的(unpdate) 幻读/虚读：一个事务中 两次读取的数据的数量不一致要求在一个事务多次读取的数据的数量是一致的(insert/delete 事务隔离级别 read uncommitted : 读取尚未提交的数据 ：哪个问题都不能解决 read committed：读取已经提交的数据 ：可以解决脏读 —- oracle默认的 repeatable read：重读读取：可以解决脏读 和 不可重复读 —mysql默认的 serializable：串行化：可以解决 脏读 不可重复读 和 虚读—相当于锁表 JDBC事务控制 开启事务：conn.setAutoCommit(false); 提交：conn.commit()； 回滚：conn.rollback()； MySql事务控制 开启事务：start transaction; 提交：commit； 回滚：rollback； ThreadLocal使用‘’’public class MyDataSourceUtils { //获得Connection —– 从连接池中获取 private static ComboPooledDataSource dataSource = new ComboPooledDataSource(); //创建ThreadLocal private static ThreadLocal tl = new ThreadLocal(); //开启事务 public static void startTransaction() throws SQLException{ Connection conn = getCurrentConnection(); conn.setAutoCommit(false); } //获得当前线程上绑定的conn public static Connection getCurrentConnection() throws SQLException{ //从ThreadLocal寻找 当前线程是否有对应Connection Connection conn = tl.get(); if(conn==null){ //获得新的connection conn = getConnection(); //将conn资源绑定到ThreadLocal（map）上 tl.set(conn); } return conn; } public static Connection getConnection() throws SQLException{ return dataSource.getConnection(); } //回滚事务 public static void rollback() throws SQLException { getCurrentConnection().rollback(); } //提交事务 public static void commit() throws SQLException { Connection conn = getCurrentConnection(); conn.commit(); //将Connection从ThreadLocal中移除 tl.remove(); conn.close(); }‘’’ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/2020/03/25/%E4%BA%8B%E5%8A%A1%E4%B8%8EThreadLocal/"}],"tags":[],"categories":[]}